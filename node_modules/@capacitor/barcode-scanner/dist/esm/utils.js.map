{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG;IAC/B,EAAE,QAAQ,EAAE,4BAA4B,EAAE,GAAG,EAAE,iBAAiB,EAAE;IAClE;QACE,QAAQ,EAAE,iBAAiB;QAC3B,GAAG,EAAE,8IAA8I;KACpJ;IACD;QACE,QAAQ,EAAE,uBAAuB;QACjC,GAAG,EAAE,gGAAgG;KACtG;IACD,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,EAAE,iFAAiF,EAAE;IACrH,EAAE,QAAQ,EAAE,qBAAqB,EAAE,GAAG,EAAE,cAAc,EAAE;IACxD,EAAE,QAAQ,EAAE,+BAA+B,EAAE,GAAG,EAAE,cAAc,EAAE;CACnE,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,UAAU,QAAQ,CAAC,QAA6C;IACpE,MAAM,OAAO,GAAG,6BAA6B,CAAC,CAAC,2CAA2C;IAC1F,IAAI,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAA4B,CAAC;IAC/E,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,8DAA8D;QAC9D,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC/C,YAAY,CAAC,IAAI,GAAG,UAAU,CAAC;QAC/B,YAAY,CAAC,EAAE,GAAG,OAAO,CAAC;QAC1B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IACD,IAAI,YAAY,CAAC,KAAK,EAAE,CAAC;QACvB,4BAA4B;QAC5B,OAAO,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YAC1C,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,wBAAwB;QACxB,KAAK,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,IAAI,QAAQ,EAAE,CAAC;YACzC,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,QAAQ,MAAM,GAAG,IAAI,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;SAAM,CAAC;QACN,iDAAiD;QACjD,YAAY,CAAC,WAAW,GAAG,EAAE,CAAC;QAC9B,KAAK,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,IAAI,QAAQ,EAAE,CAAC;YACzC,YAAY,CAAC,WAAW,IAAI,GAAG,QAAQ,MAAM,GAAG,IAAI,CAAC;QACvD,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["/**\n * Predefined CSS rules for styling barcode scanner components.\n * Each object in the array defines a CSS rule, with a selector and the CSS properties to apply.\n */\nexport const barcodeScannerCss = [\n  { selector: '.scanner-container-display', css: 'display: block;' },\n  {\n    selector: '.scanner-dialog',\n    css: 'display: none; position: fixed; z-index: 999; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);',\n  },\n  {\n    selector: '.scanner-dialog-inner',\n    css: 'background-color: #fefefe; margin: 2% auto; padding: 20px; border: 1px solid #888; width: 96%;',\n  },\n  { selector: '.close-button', css: 'color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer;' },\n  { selector: '.close-button:hover', css: 'color: #222;' },\n  { selector: '.scanner-container-full-width', css: 'width: 100%;' },\n];\n\n/**\n * Dynamically applies a set of CSS rules to the document.\n * If a custom style element with a specific ID does not exist, it is created and appended to the document's head.\n * Existing rules in the style element are cleared before new ones are applied.\n * This function supports both modern and older browsers by using `CSSStyleSheet.insertRule` and `textContent` respectively.\n *\n * @param {Array<{selector: string, css: string}>} cssRules - An array of objects containing CSS selectors and styles to apply.\n */\nexport function applyCss(cssRules: { selector: string; css: string }[]): void {\n  const styleId = 'custom-style-os-cap-barcode'; // Unique identifier for the style element.\n  let styleElement = document.getElementById(styleId) as HTMLStyleElement | null;\n  if (!styleElement) {\n    // Create and append a new style element if it does not exist.\n    styleElement = document.createElement('style');\n    styleElement.type = 'text/css';\n    styleElement.id = styleId;\n    document.head.appendChild(styleElement);\n  }\n  if (styleElement.sheet) {\n    // Clear existing CSS rules.\n    while (styleElement.sheet.cssRules.length) {\n      styleElement.sheet.deleteRule(0);\n    }\n    // Insert new CSS rules.\n    for (const { selector, css } of cssRules) {\n      styleElement.sheet.insertRule(`${selector} { ${css} }`);\n    }\n  } else {\n    // Fallback for older browsers using textContent.\n    styleElement.textContent = '';\n    for (const { selector, css } of cssRules) {\n      styleElement.textContent += `${selector} { ${css} }`;\n    }\n  }\n}\n"]}