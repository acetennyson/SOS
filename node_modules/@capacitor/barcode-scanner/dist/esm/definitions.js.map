{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,2BAA2B,EAAE,MAAM,cAAc,CAAC;AAE3D;;GAEG;AACH,MAAM,CAAN,IAAY,sCAGX;AAHD,WAAY,sCAAsC;IAChD,mGAAQ,CAAA;IACR,qGAAS,CAAA;AACX,CAAC,EAHW,sCAAsC,KAAtC,sCAAsC,QAGjD;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,sCAIX;AAJD,WAAY,sCAAsC;IAChD,2GAAY,CAAA;IACZ,6GAAa,CAAA;IACb,2GAAY,CAAA;AACd,CAAC,EAJW,sCAAsC,KAAtC,sCAAsC,QAIjD;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,wCAEX;AAFD,WAAY,wCAAwC;IAClD,sGAAQ,CAAA;AACV,CAAC,EAFW,wCAAwC,KAAxC,wCAAwC,QAEnD;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,+BAA+B,mCACvC,2BAA2B,GAC3B,wCAAwC,CAC5C,CAAC;AAQF;;GAEG;AACH,MAAM,CAAN,IAAY,6CAGX;AAHD,WAAY,6CAA6C;IACvD,gEAAe,CAAA;IACf,gEAAe,CAAA;AACjB,CAAC,EAHW,6CAA6C,KAA7C,6CAA6C,QAGxD","sourcesContent":["import { Html5QrcodeSupportedFormats } from 'html5-qrcode';\n\n/**\n * Enum representing the direction of the camera to be used for barcode scanning.\n */\nexport enum CapacitorBarcodeScannerCameraDirection {\n  BACK = 1,\n  FRONT = 2,\n}\n\n/**\n * Enum representing the orientation of the scanner during barcode scanning.\n */\nexport enum CapacitorBarcodeScannerScanOrientation {\n  PORTRAIT = 1,\n  LANDSCAPE = 2,\n  ADAPTIVE = 3,\n}\n\n/**\n * Enum representing a special option to indicate that all barcode types are supported.\n */\nexport enum CapacitorBarcodeScannerTypeHintALLOption {\n  ALL = 17,\n}\n\n/**\n * Extends supported formats from Html5Qrcode with a special 'ALL' option,\n * indicating support for all barcode types.\n */\nexport const CapacitorBarcodeScannerTypeHint = {\n  ...Html5QrcodeSupportedFormats,\n  ...CapacitorBarcodeScannerTypeHintALLOption,\n};\n\n/**\n * Type definition combining Html5QrcodeSupportedFormats and OSBarcodeTypeHintALLOption\n * to represent the hint for the type of barcode to be scanned.\n */\nexport type CapacitorBarcodeScannerTypeHint = Html5QrcodeSupportedFormats | CapacitorBarcodeScannerTypeHintALLOption;\n\n/**\n * Enum representing the library to be used for barcode scanning on Android devices.\n */\nexport enum CapacitorBarcodeScannerAndroidScanningLibrary {\n  ZXING = 'zxing',\n  MLKIT = 'mlkit',\n}\n\n/**\n * Defines the structure of the result returned from a barcode scan.\n */\nexport type CapacitorBarcodeScannerScanResult = { ScanResult: string };\n\n/**\n * Defines the options for configuring a barcode scan.\n */\nexport type CapacitorBarcodeScannerOptions = {\n  hint: CapacitorBarcodeScannerTypeHint;\n  scanInstructions?: string;\n  scanButton?: boolean;\n  scanText?: string;\n  cameraDirection?: CapacitorBarcodeScannerCameraDirection;\n  scanOrientation?: CapacitorBarcodeScannerScanOrientation;\n  android?: {\n    scanningLibrary?: CapacitorBarcodeScannerAndroidScanningLibrary;\n  };\n  web?: {\n    showCameraSelection?: boolean;\n    scannerFPS?: number;\n  };\n};\n\n/**\n * Interface defining the contract for a plugin capable of scanning barcodes.\n * Requires implementation of the scanBarcode method, which initiates a barcode scan with given options.\n */\nexport interface CapacitorBarcodeScannerPlugin {\n  scanBarcode(options: CapacitorBarcodeScannerOptions): Promise<CapacitorBarcodeScannerScanResult>;\n}\n"]}