{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAEjD,OAAO,EACL,sCAAsC,EACtC,sCAAsC,GAIvC,MAAM,eAAe,CAAC,CAAC,6CAA6C;AACrE,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC,CAAC,qCAAqC;AAE5F;;;;GAIG;AACH,MAAM,2BAA2B,GAAG,cAAc,CAAgC,yBAAyB,EAAE;IAC3G,GAAG,EAAE,GAAG,EAAE;QACR,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,oFAAoF;QACjH,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC,gEAAgE;IAC1I,CAAC;CACF,CAAC,CAAC;AAEH,MAAM,uBAAuB;IACpB,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,OAAuC;QACrE,OAAO,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,IAAI,GAAG,CAAC,CAAC,+CAA+C;QAC3G,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,KAAK,CAAC,CAAC,2CAA2C;QAC7F,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,GAAG,CAAC,CAAC,uCAAuC;QACnF,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,sCAAsC,CAAC,IAAI,CAAC,CAAC,iDAAiD;QACnJ,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,sCAAsC,CAAC,QAAQ,CAAC,CAAC,qDAAqD;QAC3J,OAAO,2BAA2B,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC1D,CAAC;CACF;AAED,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC,8CAA8C;AAClF,cAAc,eAAe,CAAC,CAAC,mDAAmD","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport {\n  CapacitorBarcodeScannerCameraDirection,\n  CapacitorBarcodeScannerScanOrientation,\n  type CapacitorBarcodeScannerOptions,\n  type CapacitorBarcodeScannerPlugin,\n  type CapacitorBarcodeScannerScanResult,\n} from './definitions'; // Importing the interface for type checking.\nimport { applyCss, barcodeScannerCss } from './utils'; // Import utilities for applying CSS.\n\n/**\n * Registers the `OSBarcode` plugin with Capacitor.\n * For web platforms, it applies necessary CSS for the barcode scanner and dynamically imports the web implementation.\n * This allows for lazy loading of the web code only when needed, optimizing overall bundle size.\n */\nconst CapacitorBarcodeScannerImpl = registerPlugin<CapacitorBarcodeScannerPlugin>('CapacitorBarcodeScanner', {\n  web: () => {\n    applyCss(barcodeScannerCss); // Apply the CSS styles necessary for the web implementation of the barcode scanner.\n    return import('./web').then((m) => new m.CapacitorBarcodeScannerWeb()); // Dynamically import the web implementation and instantiate it.\n  },\n});\n\nclass CapacitorBarcodeScanner {\n  public static async scanBarcode(options: CapacitorBarcodeScannerOptions): Promise<CapacitorBarcodeScannerScanResult> {\n    options.scanInstructions = options.scanInstructions || ' '; // Ensure scanInstructions is at least a space.\n    options.scanButton = options.scanButton || false; // Set scanButton to false if not provided.\n    options.scanText = options.scanText || ' '; // Ensure scanText is at least a space.\n    options.cameraDirection = options.cameraDirection || CapacitorBarcodeScannerCameraDirection.BACK; // Set cameraDirection to 'BACK' if not provided.\n    options.scanOrientation = options.scanOrientation || CapacitorBarcodeScannerScanOrientation.ADAPTIVE; // Set scanOrientation to 'ADAPTIVE' if not provided.\n    return CapacitorBarcodeScannerImpl.scanBarcode(options);\n  }\n}\n\nexport { CapacitorBarcodeScanner }; // Export the `CapacitorBarcodeScanner` class.\nexport * from './definitions'; // Re-export all exports from the definitions file.\n"]}