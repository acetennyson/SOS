import { registerPlugin as p } from "@capacitor/core";
function u(i) {
  i.CapacitorUtils.Synapse = new Proxy(
    {},
    {
      get(a, o) {
        return new Proxy({}, {
          get(l, n) {
            return (w, c, r) => {
              const t = i.Capacitor.Plugins[o];
              if (t === void 0) {
                r(new Error(`Capacitor plugin ${o} not found`));
                return;
              }
              if (typeof t[n] != "function") {
                r(new Error(`Method ${n} not found in Capacitor plugin ${o}`));
                return;
              }
              (async () => {
                try {
                  const e = await t[n](w);
                  c(e);
                } catch (e) {
                  r(e);
                }
              })();
            };
          }
        });
      }
    }
  );
}
function s(i) {
  i.CapacitorUtils.Synapse = new Proxy(
    {},
    {
      get(a, o) {
        return i.cordova.plugins[o];
      }
    }
  );
}
function d(i = !1) {
  window.CapacitorUtils = window.CapacitorUtils || {}, window.Capacitor !== void 0 && !i ? u(window) : window.cordova !== void 0 && s(window);
}
const g = p("FileViewer", {
  web: () => import("./web-R-VO1Dq5.js").then((i) => new i.FileViewerWeb())
});
d();
export {
  g as FileViewer
};
